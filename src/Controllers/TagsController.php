<?php
/*
 * PersonalCloudStorageAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/13/2016
 */

namespace PersonalCloudStorageAPIsLib\Controllers;

use PersonalCloudStorageAPIsLib\APIException;
use PersonalCloudStorageAPIsLib\APIHelper;
use PersonalCloudStorageAPIsLib\Configuration;
use PersonalCloudStorageAPIsLib\Models;
use PersonalCloudStorageAPIsLib\Exceptions;
use PersonalCloudStorageAPIsLib\Http\HttpRequest;
use PersonalCloudStorageAPIsLib\Http\HttpResponse;
use PersonalCloudStorageAPIsLib\Http\HttpMethod;
use PersonalCloudStorageAPIsLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class TagsController extends BaseController {

    /**
     * @var TagsController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return TagsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Delete the tags on a file or folder.
     * @param  string     $uri               Required parameter: URI of the resource. This is a URI value obtained from a fullview or metadata response
     * @param  bool       $createVersion     Optional parameter: If 'true', creates a new version of the file or folder. Defaults to 'false'.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deleteTags (
                $uri,
                $createVersion = false) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/tags';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'uri'           => $uri,
            'createVersion' => (null != $createVersion) ? var_export($createVersion, true) : false,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Query parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new Exceptions\ErrorResponseException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] File or folder was not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }
    }
        
    /**
     * Update the tags on a file or folder.
     * @param  Models\UpdateTagsRequest $updateTags      Required parameter: Allows a user to update Tags on a file or folder
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updateTags (
                $updateTags) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/tags';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($updateTags));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Query parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new Exceptions\ErrorResponseException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] File or folder was not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\TagsResponse());
    }
        
    /**
     * Get the list of tags on a file or folder.
     * @param  string     $path     Required parameter: The path to the file or folder for which tags need to be retrieved
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getTags (
                $path) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/tags/{path}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'path' => $path,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new Exceptions\ErrorResponseException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] File or folder was not found.', $_httpContext);
        }

        else if ($response->code == 410) {
            throw new Exceptions\ErrorResponseException('[Gone] File or folder was removed.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\TagsResponse());
    }
        

}