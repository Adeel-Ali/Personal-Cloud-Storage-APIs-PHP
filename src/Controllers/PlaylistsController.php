<?php
/*
 * PersonalCloudStorageAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 10/13/2016
 */

namespace PersonalCloudStorageAPIsLib\Controllers;

use PersonalCloudStorageAPIsLib\APIException;
use PersonalCloudStorageAPIsLib\APIHelper;
use PersonalCloudStorageAPIsLib\Configuration;
use PersonalCloudStorageAPIsLib\Models;
use PersonalCloudStorageAPIsLib\Exceptions;
use PersonalCloudStorageAPIsLib\Http\HttpRequest;
use PersonalCloudStorageAPIsLib\Http\HttpResponse;
use PersonalCloudStorageAPIsLib\Http\HttpMethod;
use PersonalCloudStorageAPIsLib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class PlaylistsController extends BaseController {

    /**
     * @var PlaylistsController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return PlaylistsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Remove an item from a playlist.
     * @param  string     $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @param  string     $itemUid         Required parameter: Unique id related to a specific item in a playlist.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deletePlaylistItem (
                $playlistUid,
                $itemUid) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}/items/{itemUid}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            'itemUid'     => $itemUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }
    }
        
    /**
     * Retrieves playlist content.
     * @param  string     $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @param  string     $itemUid         Required parameter: Unique id related to a specific item in a playlist.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPlaylistContent (
                $playlistUid,
                $itemUid) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}/items/{itemUid}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            'itemUid'     => $itemUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Query parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new Exceptions\ErrorResponseException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        return $response->body;
    }
        
    /**
     * Delete a playlist.
     * @param  string     $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function deletePlaylist (
                $playlistUid) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::DELETE, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::delete($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }
    }
        
    /**
     * Update a playlist.
     * @param  string           $playlistUid      Required parameter: Unique id related to a specific playlist.
     * @param  Models\PlaylistBase $playlistBase     Required parameter: Request object to update basic playlist details.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function putPlaylists (
                $playlistUid,
                $playlistBase) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid'  => $playlistUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($playlistBase));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\Playlist());
    }
        
    /**
     * Get a playlist definition.
     * @param  string     $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPlaylist (
                $playlistUid) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\Playlist());
    }
        
    /**
     * Add item(s) to a playlist.
     * @param  string                 $playlistUid       Required parameter: Unique id related to a specific playlist.
     * @param  Models\PlaylistAddRequest $playlistItems     Required parameter: Request object to add items in playlist.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function postPlaylistItem (
                $playlistUid,
                $playlistItems) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid'   => $playlistUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($playlistItems));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\PlaylistAddResponse());
    }
        
    /**
     * Update a playlist by sending a new 'playlistDefinition' model.
     * @param  string              $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @param  Models\PlaylistRequest $playlist        Required parameter: playlist request object
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function updatePlaylist (
                $playlistUid,
                $playlist) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::PUT, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::put($_queryUrl, $_headers, Request\Body::Json($playlist));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\Playlist());
    }
        
    /**
     * Create a playlist.
     * @param  Models\PlaylistRequest $playlist     Required parameter: playlist request object
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function postPlaylist (
                $playlist) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($playlist));

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->map($response->body, new Models\Playlist());
    }
        
    /**
     * Get a list of a playlists's items.
     * @param  string      $playlistUid     Required parameter: Unique id related to a specific playlist.
     * @param  integer     $start           Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param  integer     $count           Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param  string      $sort            Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'.Valid values for 'field' are: name, versionCreated, size, extension, album, artist, captureDate, contentType, creationDate, genre, height, priority, title, timelineDate.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPlaylistItems (
                $playlistUid,
                $start = NULL,
                $count = NULL,
                $sort = NULL) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists/{playlistUid}/items';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'playlistUid' => $playlistUid,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'start'       => $start,
            'count'       => $count,
            'sort'        => $sort,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 404) {
            throw new Exceptions\ErrorResponseException('[Not Found] Resource not found.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->mapArray($response->body, array(), new Models\PlaylistItem());
    }
        
    /**
     * Get a list of the user's playlists.
     * @param  string      $type      Optional parameter: The type of the playlist. Can be one of 'image', 'music', 'video' or 'image-video'.
     * @param  integer     $start     Optional parameter: Starting point for partial responses, for folder requests. Default is 1.
     * @param  integer     $count     Optional parameter: Maximum items to include in a paginated response, for folder requests.  Required if start is specified.
     * @param  string      $sort      Optional parameter: Specify sort order for response. Syntax is '{field}+{asc|desc}'. Valid values for 'field' are 'name' and 'creationDate'.
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPlaylists (
                $type = NULL,
                $start = NULL,
                $count = NULL,
                $sort = NULL) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/playlists';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'type'  => $type,
            'start' => $start,
            'count' => $count,
            'sort'  => $sort,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthAccessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);            
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
            $_httpContext = new HttpContext($_httpRequest, $_httpResponse);
            
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);            
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorResponseException('[Bad Request] Query parameters missing or invalid.', $_httpContext);
        }

        else if ($response->code == 401) {
            throw new Exceptions\ErrorResponseException('[Unauthorized] Bearer token is missing, expired, or invalid.', $_httpContext);
        }

        else if ($response->code == 503) {
            throw new Exceptions\ErrorResponseException('[Service Unavailable] See response body for more detail.', $_httpContext);
        }

        else if (($response->code < 200) || ($response->code > 208)) { //[200,208] = HTTP OK
            throw new APIException("HTTP Response Not OK", $_httpContext);
        }

        $mapper = $this->getJsonMapper();

        return $mapper->mapArray($response->body, array(), new Models\Playlist());
    }
        

}